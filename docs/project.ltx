\documentclass{article}
\usepackage{graphicx}

\begin{document}

\title{ The Grammars of the Atlas Engine {}}
\author{Jonathan D. Spengeman}

\maketitle

\begin{abstract}
Atlas is an exploratory project meant to strengthen knowledge in the fields related to parsing and implementation of algorithms related to mathematics. Atlas will be utilized as a computation engine that will calculate a variety of mathematical equations. These equations are going to be limited to simple infix equations as well as concepts from the first semester of Calculus, initially. Atlas accepts a specific Context Free Grammar as it's input and parses that input using a recursive decent pattern. This paper discusses all of the grammars that are used in the Atlas engine and details the implementations.  As stated, this project is going to service as exploration to enhance knowledge in specific fields but may not be making any ground breaking finds.
\end{abstract}

\section{Introduction}
A substantial part of this project includes the grammars that are utilized by the interpreter so it is logical to spend some time discussing those grammars. For the Atlas Engine to function properly it requires an input grammar and and as the engine grows in power it will require an output grammar but for now the primary focus will be the input grammar. 

\vspace{5mm}

A Context Free Grammar is a set that contains 3 other sets and a singleton. The first to be described is a set of all terminal symbols which are the characters that appear in the string generated by the grammar. Next, we will discuss the set of all non-terminal symbols which are the placeholders for the patterns of the elements from the set of terminals. The last set we have is a list of productions which define the rules for replacing non-terminals with other non-terminals or terminals. The last element of a grammar is simply the starting symbol which defines which non-terminal the pattern will begin with.

\begin{equation}
    G = \big\{ \: V, \: \Sigma, \: R,  \: S  \: \big\} 
\end{equation}

\subsection{Intermediate Grammar}

We will begin by defining an intermediate grammar that will be using to evaluate definite integrals. Imagine we want to integrate the following polynomial: 

\begin{equation}
    \int_1^5 x^3 + x^2 + x  \: dx = x^4 + x^3 + x^2\bigg|_1^5 
\end{equation}

Now imagine that our interpreter can evaluate this integral by using the input string it was given and it returns an a string that represents our evaluated integral but we have not solved for our limits of integration yet. We know we need to evaluate this integral between 0 and 5 but we currently have a string of text that represents our output so how could we finish the evaluation of this integral. Lets begin by writing out the function with the limits of integration plugged in the equation.

\begin{equation}
    5^4 + 5^3 + 5^2 - 1^4 + 1^3 + 1^2 
\end{equation}

If we were evaluating an indefinite integral then we would be done but in this case we still need to evaluate the integral between its limits of integration. So how would we actually take our string representation of our integral and turn it into an actual answer. We have the following string ``$x^4 + x^3 + x^2$'' as our initial output. Now what if we replaced all instances of x with 5 and that would give us ``$5^4 + 5^3 + 5^2$'' as you can see above. Then if repeat the process we get ``$1^4 + 1^3 + 1^2$". If we concatenated an instance of `` - '' onto the first string then concatenated the second string onto the new string we would get a string that resembles ``$5^4 + 5^3 + 5^2 - 1^4 + 1^3 + 1^2$'' which initially may not seem like it is very helpful. Although, we can easily define an intermediate grammar that can be used in another part of our interpreter which is responsible for evaluating simple infix expressions like the new string we have. The interpreter will implement this intermediate grammar and it will take a string as input and return a number, this will allow the interpreter to evaluate most simple definite integrals. 

\vspace{5mm}

Now let's begin with the formal definition of our intermediate grammar's productions:

\begin{equation}
	Expression \rightarrow Expression + Term \ | \ Expression - Term \ | \ Term
\end{equation}

\begin{equation}
	Term \rightarrow Term \times Factor \ | \ Term \div Factor \ | \ Factor
\end{equation}

\begin{equation}
	Factor \rightarrow Number \ | \ Number \wedge Factor 
\end{equation}

\begin{equation}
	Number \rightarrow Digits \ | \ (Expression) 
\end{equation}

\begin{equation}
	Digits \rightarrow 0 \ | \ 1 \ | \ 2 \ | \ ... \  | \ 9 \ | \ Digits
\end{equation}

\vspace{5mm}
The start symbol would be Expression and the terminals would be the set $\big\{ \ 0, \ 1,\ 2 ...\ 9 \big\}$ while the nonterminals are the set that consist of: 

\begin{equation}
	\big\{ \: Expression, \: Term, \: Factor,  \: Number,  \: Digits \: \big\} . 
\end{equation}

With this grammar and an interpreter that implements that grammar we would be able to input any definite integral that has been expanded at both of its limits of integration as we displayed earlier. This grammar and part of the interpreter is utilitarian and does not define the grammar that will be used as the input to this interpreter but it does not mean the interpreter could not evaluate an infix expression. 

\subsection{Input Grammar}
Now that we have an intermediate grammar that we can use to evaluate our definite integrals, we can define our input grammar. This grammar is throughly more complex then the intermediate grammar discussed above. It is a continual work in progress currently and I am leaving parts of the grammar open for expansion so we can add more functionality to our interpreter later. It is worth mentioning that some non-terminals are used from the above grammar as well and they remain the same as the above grammar unless specified other wise. The starting symbol for our grammar will be the non-terminal named Input the following elements make up the grammars productions:

\begin{equation}
	Input \rightarrow Integral \ | \ Derivative \ | \ Expression
\end{equation}

\begin{equation}
	Integral \rightarrow int \ Equation \ dx \ [ \ between \ Digits \ and \ Digits \ ]
\end{equation}

\begin{equation}
	Equation \rightarrow Polynomial \ | \ ... \ | \ ?
\end{equation}

\begin{equation}
	Polynomial \rightarrow Polynomial + Term  | Polynomial - Term | Term
\end{equation}

\begin{equation}
	Term \rightarrow Term \times Factor \ | \ Term \div Factor \ | \ Factor
\end{equation}

\begin{equation}
	Factor \rightarrow Nomial  | Nomial \wedge ( Digits | (Expression))
\end{equation}

\begin{equation}
	Monomial \rightarrow [Digits] \ A \ | \ B | \ C \ | \ ... \ z
\end{equation}

\begin{equation}
	Digits \rightarrow 0 \ | \ 1 \ | \ 2 \ | \ ... \  | \ 9 \ | \ Digits
\end{equation}

The set that makes up our non-terminals would be:

\begin{eqnarray*}
	\big\{ \: Input, \: Integral, \: Equation, \: Polynomial, \: Term, \: \\ Factor, \: Monomial, \: Digits, \: Expression,  \: \big\} 
\end{eqnarray*}

And the following containing all alphanumeric characters makes up our set of terminals:

\begin{equation}
	\big\{ \: 0, \: 1, \: 2 :\ ... \: 9, \: A, \: B, \: C \: ... \: z  \:  \big\} 
\end{equation}

\section{Conclusion}
Write your conclusion here.

\end{document}